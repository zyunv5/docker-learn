version: "3"
services:
  web:
    build:
      context: ./
      dockerfile: ./Dockerfile.multi
    container_name: docker-react
    ports:
      - 9999:80
    networks:
      - frontend
      - backend
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - nodejs
      - mysqlDB

  nodejs:
    build:
      context: ./node-redis
      dockerfile: ./Dockerfile
    container_name: docker-nodejs
    ports:
      - 3014:3014
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - mysqlDB
    links:
      - mysqlDB
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: 123456
      DATABASE_HOST: mysqlDB

  mysqlDB:
    image: mysql:5.7.31
    container_name: docker-mysql
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: "test"
      MYSQL_USER: root #创建test用户
      MYSQL_PASSWORD: 123456 #设置test用户的密码
      TZ: Asia/Shanghai # 设置时区
    ports:
      - "3307:3306"
    networks:
      - backend
    privileged: true
    command:
      [
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_unicode_ci",
      ]
    volumes:
      # - ./mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
      - "./mysql/data:/var/lib/mysql"
      - ./mysql/init:/docker-entrypoint-initdb.d/

networks:
  frontend:
  backend:
    driver: bridge
# docker-compose down
# docker-compose up -d --build
# docker-compose --compatibility up -d
# docker push
