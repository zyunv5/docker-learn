version: "3"
services:
  web:
    build:
      context: ./
      dockerfile: ./Dockerfile.multi
    container_name: docker-react
    ports:
      - 9999:80
    networks:
      - frontend
      - backend
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - nodejs
      - redis

  nodejs:
    build:
      context: ./node-redis
      dockerfile: ./Dockerfile
    container_name: docker-nodejs
    ports:
      - 3014:3014
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
      - mongoDB
      - mysqlDB
    links:
      - redis
      - mongoDB
      - mysqlDB
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: 123456

  redis:
    image: redis:alpine
    container_name: docker-redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
    privileged: true
    # volumes:
    # - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    # command: redis-server /usr/local/etc/redis/redis.conf

networks:
  frontend:
  backend:
    driver: bridge
# docker-compose --compatibility up
# docker-compose up -d --build

# const redis = new Redis({
#   host: "redis",
#   port: 6379,
# });
